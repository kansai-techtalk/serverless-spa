---
swagger: "2.0"
info:
  description: TodoAPI for React sample App.
  version: "1"
  title: TodoAPI
host: virtserver.swaggerhub.com
basePath: /Kazunori-Kimura/TodoAPI/1
schemes:
- https
paths:
  /todo:
    get:
      summary: Get all todos
      description: ""
      operationId: getTodos
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Todo'
        404:
          description: Todo not found
    post:
      summary: Add a new todo
      description: ""
      operationId: addTodo
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Todo object that needs to be added to the db
        required: true
        schema:
          $ref: '#/definitions/TodoPostParameters'
      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Todo'
        400:
          description: Bad Request
  /todo/{ID}:
    get:
      summary: Find todo by ID
      description: Returns a single todo
      operationId: getTodoById
      produces:
      - application/json
      parameters:
      - name: ID
        in: path
        description: ID of pet to return
        required: true
        type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Todo'
        400:
          description: Invalid ID supplied
        404:
          description: Todo not found
    put:
      summary: Updates a todo
      description: ""
      operationId: updateTodoWithForm
      consumes:
      - application/x-www-form-urlencoded
      produces:
      - application/json
      parameters:
      - name: ID
        in: path
        description: ID of todo that needs to be updated
        required: true
        type: string
      - name: Content
        in: formData
        description: Updated title of the todo
        required: true
        type: string
      - name: Done
        in: formData
        description: Updated status of the todo
        required: false
        type: boolean
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Todo'
        400:
          description: Bad Request
    delete:
      summary: Deletes a todo
      description: ""
      operationId: deleteTodo
      produces:
      - application/json
      parameters:
      - name: ID
        in: path
        description: Todo id to delete
        required: true
        type: string
      responses:
        204:
          description: No Content
        400:
          description: Invalid ID supplied
        404:
          description: Todo not found
definitions:
  Todo:
    type: object
    properties:
      ID:
        type: string
      Content:
        type: string
      Done:
        type: boolean
      CreatedAt:
        type: string
      UpdatedAt:
        type: string
  TodoPostParameters:
    type: object
    properties:
      Content:
        type: string
      Done:
        type: boolean
